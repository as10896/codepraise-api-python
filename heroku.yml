setup:
  addons:
    - plan: heroku-postgresql
      as: DATABASE
    - plan: heroku-redis
      as: REDIS
      # By default, Heroku Redis will `timeout` connections idle for 5 minutes.
      # This might be problematic when using Redis as Pub/Sub, since in Pub/Sub mode a Redis subscriber can
      # only subscribe/unsubscribe to channels and cannot do any other operation, including `timeout`.
      # Chances are you might see errors like "Cannot run command inside pubsub subscription" and some resulting application failures.
      # Here we disable the default timeout operation of Heroku Redis to prevent unexpected errors.
      # You can use `heroku redis:timeout --seconds 0` if you have Heroku CLI installed.

      # Refs:
      # https://devcenter.heroku.com/articles/heroku-redis#timeout
      # https://redis.io/topics/pubsub
      # https://stackoverflow.com/questions/23961770/why-doesnt-redis-pub-sub-allow-access-to-redis-within-the-callback
build:
  docker:
    web: Dockerfile
  config:
    HEROKU_DEPLOY: true
release:
  image: web
  command:
    - inv db.migrate -e production
run:
  # Due to Heroku's ephemeral filesystem, here we run the API and the worker in the same container.
  # In doing so, the API will know whether the worker has finished cloning the github repo or not, and can then analyze the cloned repo with git blame.
  # Also, we use only 2 processes for API/worker respectively to avoid Heroku's memory quota exceeded error as much as possible.
  web: inv worker.run.prod -p 2 & inv api.run.prod -p ${PORT:-8000} -w 2
